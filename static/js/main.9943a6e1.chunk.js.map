{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getQuote","bind","fetch","then","response","json","data","setState","en","author","colors","color","Math","floor","random","length","document","body","style","background","this","twitterShare","encodeURIComponent","quote","id","className","icon","faQuoteLeft","title","target","href","faTwitter","faTumblr","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUAyEeA,E,YAjEX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACT,MAAS,GACT,OAAU,IAEd,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBANN,E,wEAUF,IAAD,OACPC,MAAM,sEACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKC,SAAS,CACV,MAASD,EAAKE,GACd,OAAUF,EAAKG,YAG3B,IAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACnIC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QAChDC,SAASC,KAAKC,MAAMC,WAAaT,EAAOC,GACxCK,SAASC,KAAKC,MAAMP,MAAQD,EAAOC,K,0CAQnCS,KAAKpB,a,+BAKL,IAAMqB,EAAgB,8EAAgFC,mBAAmB,IAAMF,KAAKrB,MAAMwB,MAAQ,KAAOH,KAAKrB,MAAMU,QACpK,OACI,yBAAKe,GAAG,WACJ,yBAAKA,GAAG,aACJ,yBAAKC,UAAU,cACX,kBAAC,IAAD,CAAiBC,KAAMC,MAAc,0BAAMH,GAAG,QAAT,IAAkBJ,KAAKrB,MAAMwB,QAEtE,yBAAKE,UAAU,gBAAf,KACM,0BAAMD,GAAG,UAAUJ,KAAKrB,MAAMU,SAEpC,yBAAKgB,UAAU,WAEX,uBAAGA,UAAU,SAASD,GAAG,cAAcI,MAAM,oBAAoBC,OAAO,SAASC,KAAMT,GACnF,kBAAC,IAAD,CAAiBK,KAAMK,OAE3B,uBAAGN,UAAU,SAASD,GAAG,eAAeI,MAAM,8BAC1C,kBAAC,IAAD,CAAiBF,KAAMM,OAE3B,4BAAQP,UAAU,SAASD,GAAG,YAAYS,QAASb,KAAKpB,UAAxD,eAGR,yBAAKyB,UAAU,UAAf,+B,GAzDES,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.9943a6e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faQuoteLeft} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faTumblr, faTwitter} from '@fortawesome/free-brands-svg-icons';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            'quote': '',\r\n            'author': ''\r\n        };\r\n        this.getQuote = this.getQuote.bind(this);\r\n    }\r\n\r\n\r\n    getQuote() {\r\n        fetch('https://programming-quotes-api.herokuapp.com/quotes/random/lang/en')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    'quote': data.en,\r\n                    'author': data.author\r\n                });\r\n            });\r\n        const colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\r\n        const color = Math.floor(Math.random() * colors.length);\r\n        document.body.style.background = colors[color];\r\n        document.body.style.color = colors[color];\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.getQuote();\r\n    }\r\n\r\n\r\n    render() {\r\n        const twitterShare =  'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + this.state.quote + '\" ' + this.state.author);\r\n        return (\r\n            <div id=\"wrapper\">\r\n                <div id=\"quote-box\">\r\n                    <div className=\"quote-text\">\r\n                        <FontAwesomeIcon icon={faQuoteLeft}/><span id=\"text\"> {this.state.quote}</span>\r\n                    </div>\r\n                    <div className=\"quote-author\">\r\n                        - <span id=\"author\">{this.state.author}</span>\r\n                    </div>\r\n                    <div className=\"buttons\">\r\n\r\n                        <a className=\"button\" id=\"tweet-quote\" title=\"Tweet this quote!\" target=\"_blank\" href={twitterShare}>\r\n                            <FontAwesomeIcon icon={faTwitter}/>\r\n                        </a>\r\n                        <a className=\"button\" id=\"tumblr-quote\" title=\"Post this quote on tumblr!\">\r\n                            <FontAwesomeIcon icon={faTumblr}/>\r\n                        </a>\r\n                        <button className=\"button\" id=\"new-quote\" onClick={this.getQuote}>New quote</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer\"> by Md. Muminur Rahman</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}